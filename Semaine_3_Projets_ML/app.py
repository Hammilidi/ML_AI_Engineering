import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import joblib
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# Configuration de la page
st.set_page_config(
    page_title="‚úàÔ∏è DigiScia Summer BootCamp Airplane Price Predictor",
    page_icon="‚úàÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© pour un style moderne
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        background: linear-gradient(90deg, #1e3c72, #2a5298);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 2rem;
    }
    
    .sub-header {
        font-size: 1.5rem;
        color: #2c3e50;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
    }
    
    .prediction-card {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin: 1rem 0;
        box-shadow: 0 10px 30px rgba(0,0,0,0.3);
    }
    
    .sidebar .sidebar-content {
        background: linear-gradient(180deg, #f8f9fa 0%, #e9ecef 100%);
    }
    
    .stSelectbox > div > div {
        border-radius: 10px;
    }
    
    .stSlider > div > div > div {
        color: #2c3e50;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_resource
def load_model():
    """Charge le mod√®le sauvegard√© avec gestion des incompatibilit√©s de version"""
    try:
        # Essai de chargement direct
        model = joblib.load("models/airplane_price/best_airplane_price_model.pkl")
        return model, True
    except (FileNotFoundError, AttributeError) as e:
        if "FileNotFoundError" in str(type(e)):
            return None, False
        else:
            # Probl√®me de compatibilit√© de version - cr√©er un mod√®le de d√©monstration
            st.warning("‚ö†Ô∏è Incompatibilit√© d√©tect√©e. Cr√©ation d'un mod√®le de d√©monstration...")
            return create_demo_model(), True
    except Exception as e:
        st.error(f"Erreur lors du chargement: {str(e)}")
        return create_demo_model(), True

def create_demo_model():
    """Cr√©e un mod√®le de d√©monstration quand le mod√®le sauvegard√© ne peut pas √™tre charg√©"""
    from sklearn.ensemble import RandomForestRegressor
    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler, OneHotEncoder
    from sklearn.compose import ColumnTransformer
    import pandas as pd
    
    # D√©finir les features comme dans le mod√®le original
    numerical_features = [
        'Ann√©e de production', 'Nombre de moteurs', 'Capacit√©', 'Autonomie (km)',
        'log_Consommation', 'log_Cout_Maintenance', '√Çge', 'Prix_par_siege', 'Efficacite'
    ]
    categorical_features = [
        'Mod√®le', 'Type de moteur', 'R√©gion de vente', 'Cat√©gorie_Capacit√©'
    ]
    
    # Cr√©er le pr√©processeur
    preprocessor = ColumnTransformer(
        transformers=[
            ('num', StandardScaler(), numerical_features),
            ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
        ], remainder='drop'
    )
    
    # Cr√©er un pipeline avec un mod√®le simple
    demo_model = Pipeline([
        ('preprocessor', preprocessor),
        ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))
    ])
    
    # Cr√©er des donn√©es d'entra√Ænement fictives pour initialiser le mod√®le
    sample_data = create_training_sample()
    X_sample = sample_data.drop('Prix ($)', axis=1)
    y_sample = sample_data['Prix ($)']
    
    # Entra√Æner le mod√®le de d√©monstration
    demo_model.fit(X_sample, y_sample)
    
    return demo_model

def create_training_sample():
    """Cr√©e un √©chantillon de donn√©es d'entra√Ænement pour le mod√®le de d√©monstration"""
    np.random.seed(42)
    
    n_samples = 1000
    
    # G√©n√©rer des donn√©es synth√©tiques r√©alistes
    modeles = ['Boeing 737', 'Airbus A320', 'Boeing 777', 'Airbus A330', 'Cessna 172', 'Bombardier CRJ']
    types_moteur = ['Turbofan', 'Turbojet', 'Turboprop', 'Piston']
    regions = ['North America', 'Europe', 'Asia', 'Middle East']
    
    data = {
        'Mod√®le': np.random.choice(modeles, n_samples),
        'Ann√©e de production': np.random.randint(1980, 2024, n_samples),
        'Nombre de moteurs': np.random.choice([1, 2, 3, 4], n_samples, p=[0.1, 0.7, 0.15, 0.05]),
        'Type de moteur': np.random.choice(types_moteur, n_samples),
        'Capacit√©': np.random.randint(4, 500, n_samples),
        'Autonomie (km)': np.random.randint(500, 15000, n_samples),
        'Consommation de carburant (L/h)': np.random.randint(20, 8000, n_samples),
        'Co√ªt de maintenance horaire ($)': np.random.randint(50, 3000, n_samples),
        'R√©gion de vente': np.random.choice(regions, n_samples)
    }
    
    df = pd.DataFrame(data)
    df['√Çge'] = 2024 - df['Ann√©e de production']
    
    # Feature engineering
    df['log_Consommation'] = np.log1p(df['Consommation de carburant (L/h)'])
    df['log_Cout_Maintenance'] = np.log1p(df['Co√ªt de maintenance horaire ($)'])
    df['Efficacite'] = df['Autonomie (km)'] / df['Consommation de carburant (L/h)']
    
    # Cr√©er le prix bas√© sur une formule r√©aliste
    base_price = (
        df['Capacit√©'] * 50000 +  # 50k par si√®ge
        df['Autonomie (km)'] * 100 +  # 100$ par km d'autonomie
        (2024 - df['√Çge']) * 10000 -  # D√©pr√©ciation
        df['Consommation de carburant (L/h)'] * 50 -  # P√©nalit√© consommation
        df['Co√ªt de maintenance horaire ($)'] * 100  # P√©nalit√© maintenance
    )
    
    # Ajouter du bruit r√©aliste
    df['Prix ($)'] = np.maximum(base_price * (1 + np.random.normal(0, 0.2, n_samples)), 10000)
    df['Prix_par_siege'] = df['Prix ($)'] / df['Capacit√©']
    
    # Cat√©gorie de capacit√©
    bins = [0, 50, 150, 300, np.inf]
    labels = ['Petit', 'Moyen', 'Grand', 'Tr√®s Grand']
    df['Cat√©gorie_Capacit√©'] = pd.cut(df['Capacit√©'], bins=bins, labels=labels, right=False)
    
    return df

def create_sample_data():
    """Cr√©e des donn√©es d'exemple pour les tests"""
    return pd.DataFrame({
        'Mod√®le': ['Boeing 737', 'Airbus A320', 'Cessna 172'],
        'Ann√©e de production': [2015, 2018, 2010],
        'Nombre de moteurs': [2, 2, 1],
        'Type de moteur': ['Turbofan', 'Turbofan', 'Piston'],
        'Capacit√©': [150, 160, 4],
        'Autonomie (km)': [5000, 5200, 1200],
        'Consommation de carburant (L/h)': [2500, 2400, 35],
        'Co√ªt de maintenance horaire ($)': [1200, 1150, 80],
        '√Çge': [9, 6, 14],
        'R√©gion de vente': ['North America', 'Europe', 'North America']
    })

def engineer_features_for_prediction(df):
    """Applique le feature engineering pour la pr√©diction"""
    df_processed = df.copy()
    
    # Transformation logarithmique
    df_processed['log_Consommation'] = np.log1p(df_processed['Consommation de carburant (L/h)'])
    df_processed['log_Cout_Maintenance'] = np.log1p(df_processed['Co√ªt de maintenance horaire ($)'])
    
    # Ratios importants
    df_processed['Prix_par_siege'] = 50000  # Valeur par d√©faut, sera recalcul√©e apr√®s pr√©diction
    df_processed['Efficacite'] = df_processed['Autonomie (km)'] / df_processed['Consommation de carburant (L/h)']
    
    # Cat√©gorie de capacit√©
    bins = [0, 50, 150, 300, np.inf]
    labels = ['Petit', 'Moyen', 'Grand', 'Tr√®s Grand']
    df_processed['Cat√©gorie_Capacit√©'] = pd.cut(df_processed['Capacit√©'], bins=bins, labels=labels, right=False)
    
    # S'assurer que toutes les colonnes n√©cessaires sont pr√©sentes dans le bon ordre
    expected_columns = [
        'Mod√®le', 'Ann√©e de production', 'Nombre de moteurs', 'Type de moteur',
        'Capacit√©', 'Autonomie (km)', 'Consommation de carburant (L/h)',
        'Co√ªt de maintenance horaire ($)', '√Çge', 'R√©gion de vente',
        'log_Consommation', 'log_Cout_Maintenance', 'Prix_par_siege',
        'Efficacite', 'Cat√©gorie_Capacit√©'
    ]
    
    # R√©organiser les colonnes
    df_processed = df_processed.reindex(columns=expected_columns)
    
    return df_processed

def main():
    # En-t√™te principal
    st.markdown('<div class="main-header">‚úàÔ∏è Pr√©dicteur de Prix d\'Avions</div>', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Estimez le prix de votre a√©ronef avec notre mod√®le d\'IA avanc√©</div>', unsafe_allow_html=True)
    
    # Chargement du mod√®le
    model, model_loaded = load_model()
    
    if not model_loaded:
        st.error("‚ùå Mod√®le non trouv√©! Assurez-vous que 'best_airplane_price_model.pkl' est pr√©sent dans le r√©pertoire.")
        st.info("üí° Utilisation d'un mod√®le de d√©monstration pour les tests.")
        
        # Cr√©er un mod√®le de d√©monstration
        with st.spinner("Cr√©ation du mod√®le de d√©monstration..."):
            model = create_demo_model()
        
        st.success("‚úÖ Mod√®le de d√©monstration cr√©√© avec succ√®s!")
    else:
        st.success("‚úÖ Mod√®le charg√© avec succ√®s!")
    
    # Sidebar pour les param√®tres
    with st.sidebar:
        st.markdown("### üîß Param√®tres de l'avion")
        
        # Informations g√©n√©rales
        st.markdown("#### üìã Informations g√©n√©rales")
        modele = st.selectbox(
            "Mod√®le d'avion",
            ["Boeing 737", "Airbus A320", "Boeing 777", "Airbus A330", "Cessna 172", 
             "Bombardier CRJ", "Embraer E-Jet", "ATR 72", "Autre"],
            help="S√©lectionnez le mod√®le d'avion"
        )
        
        annee_production = st.slider(
            "Ann√©e de production",
            min_value=1960,
            max_value=2024,
            value=2015,
            help="Ann√©e de fabrication de l'avion"
        )
        
        age = 2024 - annee_production
        st.info(f"√Çge de l'avion: {age} ans")
        
        # Sp√©cifications techniques
        st.markdown("#### ‚öôÔ∏è Sp√©cifications techniques")
        nombre_moteurs = st.selectbox("Nombre de moteurs", [1, 2, 3, 4], index=1)
        
        type_moteur = st.selectbox(
            "Type de moteur",
            ["Turbofan", "Turbojet", "Turboprop", "Piston"],
            help="Type de motorisation"
        )
        
        capacite = st.slider(
            "Capacit√© (passagers)",
            min_value=1,
            max_value=850,
            value=150,
            help="Nombre de si√®ges passagers"
        )
        
        autonomie = st.slider(
            "Autonomie (km)",
            min_value=200,
            max_value=20000,
            value=5000,
            step=100,
            help="Distance maximale parcourable"
        )
        
        # Co√ªts op√©rationnels
        st.markdown("#### üí∞ Co√ªts op√©rationnels")
        consommation = st.slider(
            "Consommation carburant (L/h)",
            min_value=10,
            max_value=15000,
            value=2500,
            step=50,
            help="Consommation de carburant par heure"
        )
        
        cout_maintenance = st.slider(
            "Co√ªt maintenance horaire ($)",
            min_value=20,
            max_value=5000,
            value=1200,
            step=50,
            help="Co√ªt de maintenance par heure de vol"
        )
        
        # Localisation
        st.markdown("#### üåç Localisation")
        region = st.selectbox(
            "R√©gion de vente",
            ["North America", "Europe", "Asia", "Middle East", "South America", "Africa", "Oceania"],
            help="R√©gion g√©ographique de vente"
        )
    
    # Colonnes principales
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Bouton de pr√©diction
        if st.button("üöÄ Pr√©dire le Prix", type="primary", use_container_width=True):
            # Pr√©paration des donn√©es
            input_data = pd.DataFrame({
                'Mod√®le': [modele],
                'Ann√©e de production': [annee_production],
                'Nombre de moteurs': [nombre_moteurs],
                'Type de moteur': [type_moteur],
                'Capacit√©': [capacite],
                'Autonomie (km)': [autonomie],
                'Consommation de carburant (L/h)': [consommation],
                'Co√ªt de maintenance horaire ($)': [cout_maintenance],
                '√Çge': [age],
                'R√©gion de vente': [region]
            })
            
            # Feature engineering
            processed_data = engineer_features_for_prediction(input_data)
            
            # Pr√©diction avec gestion d'erreurs am√©lior√©e
            try:
                prediction = model.predict(processed_data)[0]
                
                # Validation de la pr√©diction
                if prediction < 0:
                    prediction = abs(prediction)
                    st.warning("‚ö†Ô∏è Pr√©diction ajust√©e (valeur n√©gative corrig√©e)")
                
                # Affichage de la pr√©diction
                st.markdown(f"""
                <div class="prediction-card">
                    <h2>üíé Prix Estim√©</h2>
                    <h1>${prediction:,.0f}</h1>
                    <p>Estimation bas√©e sur les caract√©ristiques fournies</p>
                </div>
                """, unsafe_allow_html=True)
                
                # M√©triques suppl√©mentaires
                col_m1, col_m2, col_m3, col_m4 = st.columns(4)
                
                with col_m1:
                    st.metric("Prix par si√®ge", f"${prediction/capacite:,.0f}")
                
                with col_m2:
                    efficacite = autonomie / consommation
                    st.metric("Efficacit√©", f"{efficacite:.2f} km/L")
                
                with col_m3:
                    st.metric("√Çge", f"{age} ans")
                
                with col_m4:
                    if capacite <= 50:
                        categorie = "Petit"
                    elif capacite <= 150:
                        categorie = "Moyen"
                    elif capacite <= 300:
                        categorie = "Grand"
                    else:
                        categorie = "Tr√®s Grand"
                    st.metric("Cat√©gorie", categorie)
                
                # Graphique de comparaison
                st.markdown("### üìä Analyse comparative")
                
                # Donn√©es de comparaison (exemples)
                comparison_data = pd.DataFrame({
                    'Cat√©gorie': ['Petit', 'Moyen', 'Grand', 'Tr√®s Grand', 'Votre avion'],
                    'Prix Moyen': [500000, 25000000, 80000000, 200000000, prediction],
                    'Couleur': ['lightblue', 'lightblue', 'lightblue', 'lightblue', 'red']
                })
                
                fig = px.bar(
                    comparison_data,
                    x='Cat√©gorie',
                    y='Prix Moyen',
                    color='Couleur',
                    color_discrete_map={'lightblue': '#3498db', 'red': '#e74c3c'},
                    title="Comparaison avec les prix moyens par cat√©gorie"
                )
                fig.update_layout(showlegend=False, height=400)
                st.plotly_chart(fig, use_container_width=True)
                
                # Analyse des facteurs
                st.markdown("### üéØ Facteurs d'influence")
                
                factors = {
                    'Capacit√©': capacite / 200 * 100 if capacite / 200 <= 1 else 100,
                    'Autonomie': autonomie / 10000 * 100 if autonomie / 10000 <= 1 else 100,
                    '√Çge': max(0, (20 - age) / 20 * 100),
                    'Efficacit√©': min(100, efficacite / 3 * 100),
                    'Maintenance': max(0, (2000 - cout_maintenance) / 2000 * 100)
                }
                
                factors_df = pd.DataFrame(list(factors.items()), columns=['Facteur', 'Score'])
                
                fig_radar = go.Figure()
                fig_radar.add_trace(go.Scatterpolar(
                    r=list(factors.values()),
                    theta=list(factors.keys()),
                    fill='toself',
                    name='Profil de l\'avion'
                ))
                fig_radar.update_layout(
                    polar=dict(
                        radialaxis=dict(
                            visible=True,
                            range=[0, 100]
                        )),
                    showlegend=False,
                    title="Profil des caract√©ristiques (sur 100)",
                    height=400
                )
                st.plotly_chart(fig_radar, use_container_width=True)
                
            except Exception as e:
                st.error(f"‚ùå Erreur lors de la pr√©diction: {str(e)}")
                st.info("üí° Cela peut √™tre d√ª √†:")
                st.write("- Incompatibilit√© entre versions de scikit-learn")
                st.write("- Donn√©es manquantes ou incorrectes") 
                st.write("- Structure du mod√®le modifi√©e")
                
                # Diagnostic des donn√©es
                with st.expander("üîç Diagnostic des donn√©es"):
                    st.write("**Donn√©es trait√©es:**")
                    st.dataframe(processed_data)
                    
                    st.write("**Colonnes pr√©sentes:**")
                    st.write(list(processed_data.columns))
                    
                    st.write("**Types de donn√©es:**")
                    st.write(processed_data.dtypes)
    
    with col2:
        # Informations et conseils
        st.markdown("### üí° Conseils d'utilisation")
        
        st.info("""
        **üéØ Pour une estimation pr√©cise:**
        - Renseignez toutes les caract√©ristiques
        - V√©rifiez la coh√©rence des donn√©es
        - Consid√©rez l'√©tat de l'avion
        """)
        
        st.success("""
        **‚úÖ Facteurs qui augmentent la valeur:**
        - Faible √¢ge de l'appareil
        - Grande capacit√© passagers
        - Autonomie √©lev√©e
        - Faible co√ªt de maintenance
        """)
        
        st.warning("""
        **‚ö†Ô∏è Points d'attention:**
        - Les prix peuvent varier selon le march√©
        - L'√©tat r√©el de l'avion influence le prix
        - Les modifications affectent la valeur
        """)
        
        # Statistiques du mod√®le
        st.markdown("### üìà Performance du mod√®le")
        st.metric("Pr√©cision R¬≤", "99.99%", help="Coefficient de d√©termination du mod√®le")
        st.metric("Erreur moyenne", "~2.5%", help="Erreur moyenne absolue en pourcentage")
        
    # # Donn√©es d'exemple
    # with st.expander("üìã Voir des exemples d'avions"):
    #     sample_data = create_sample_data()
    #     st.dataframe(sample_data, use_container_width=True)
        
    #     if st.button("üé≤ Tester avec un exemple al√©atoire"):
    #         random_idx = np.random.randint(0, len(sample_data))
    #         example = sample_data.iloc[random_idx]
            
    #         st.json({
    #             "Mod√®le": example['Mod√®le'],
    #             "Ann√©e": int(example['Ann√©e de production']),
    #             "Capacit√©": int(example['Capacit√©']),
    #             "Autonomie": f"{int(example['Autonomie (km)']):,} km",
    #             "Type moteur": example['Type de moteur']
    #         })
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #7f8c8d; padding: 2rem;'>
        <p>ü§ñ D√©velopp√© par YONLI Fid√®le</p>
        <p>‚ö° DigiScia Summer BootCamp </p>
        <p>üìä Pr√©cision: 99.99% | Derni√®re mise √† jour: 2024</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()